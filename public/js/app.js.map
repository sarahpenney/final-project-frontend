{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/organism.js","js/controllers/organisms.js","js/models/paper.js","js/controllers/papers.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","dasherize","input","replace","RegisterController","$auth","$state","submit","console","log","register","user","signup","then","go","this","LoginController","login","credentials","authenticate","provider","res","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Organism","$resource","id","update","method","OrganismsIndexController","toggleInfo","organism","organismsIndex","infoVisible","all","query","OrganismsShowController","deleteOrganism","organismsShow","$remove","get","params","delete","OrganismsEditController","organismsEdit","$update","Paper","PapersIndexController","papersIndex","organismId","organism_id","PapersShowController","deletePaper","papersShow","paper","currentUser","getPayload","PapersEditController","papersEdit","PapersCreateController","create","papersCreate","user_id","save","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","filter","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth)\n  .filter('dasherize', dasherize);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n\nfunction dasherize() {\n  return function (input) {\n    return input.replace(/ /g, '-');\n  };\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    console.log('Yo',register.user);\n    $auth.signup(register.user)\n      .then(() => {\n        console.log('pew pew');\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('organismsIndex');\n      });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    console.log(toState);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n\n    }\n\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Organism', Organism);\n\nOrganism.$inject = ['$resource', 'API_URL'];\nfunction Organism($resource, API_URL) {\n  return new $resource(`${API_URL}/organisms/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('OrganismsIndexController', OrganismsIndexController)\n.controller('OrganismsShowController', OrganismsShowController)\n.controller('OrganismsEditController', OrganismsEditController);\n\nOrganismsIndexController.$inject = ['Organism'];\nfunction OrganismsIndexController(Organism) {\n  const organismsIndex = this;\n  organismsIndex.infoVisible = false;\n\n  organismsIndex.all = Organism.query();\n\n  function toggleInfo(organism) {\n    // if (organism === organismsIndex.organism) {\n    //   organismsIndex.infoVisible = false;\n    //   organismsIndex.organism = null;\n    // } else {\n    organismsIndex.infoVisible = true;\n    organismsIndex.organism = organism;\n    // }\n  }\n\n  organismsIndex.toggleInfo = toggleInfo;\n\n}\n\n\n\nOrganismsShowController.$inject = ['Organism', '$state', '$auth'];\nfunction OrganismsShowController(Organism, $state, $auth) {\n  const organismsShow = this;\n\n  organismsShow.organism = Organism.get($state.params);\n\n  function deleteOrganism() {\n    organismsShow.organism.$remove(() => {\n      $state.go('organismsIndex');\n    });\n  }\n\n  organismsShow.delete = deleteOrganism;\n  organismsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n\nOrganismsEditController.$inject = ['Organism', '$state'];\nfunction OrganismsEditController(Organism, $state) {\n  const organismsEdit = this;\n\n  organismsEdit.organism = Organism.get($state.params);\n\n  function update() {\n    organismsEdit.organism.$update(() => {\n      $state.go('organismsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Paper', Paper);\n\nPaper.$inject = ['$resource', 'API_URL'];\nfunction Paper($resource, API_URL) {\n  return new $resource(`${API_URL}/papers/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PapersIndexController', PapersIndexController)\n  .controller('PapersShowController', PapersShowController)\n  .controller('PapersCreateController', PapersCreateController)\n  .controller('PapersEditController', PapersEditController);\n\nPapersIndexController.$inject = ['Paper', '$state'];\nfunction PapersIndexController(Paper, $state) {\n  const papersIndex = this;\n\n  const params = {};\n\n  if($state.params.organismId) {\n    params.organism_id = $state.params.organismId;\n  }\n\n  papersIndex.all = Paper.query(params);\n\n}\n\nPapersShowController.$inject = ['Paper', '$state', '$auth'];\nfunction PapersShowController(Paper, $state, $auth) {\n  const papersShow = this;\n  papersShow.currentUser = $auth.getPayload();\n  papersShow.paper = Paper.get($state.params);\n\n  function deletePaper() {\n    papersShow.paper.$remove(() => {\n      $state.go('papersIndex');\n    });\n  }\n\n  papersShow.deletePaper = deletePaper;\n  papersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n\nPapersEditController.$inject = ['Paper', '$state', '$auth'];\nfunction PapersEditController(Paper, $state, $auth) {\n  const papersEdit = this;\n\n  papersEdit.paper = Paper.get($state.params);\n  papersEdit.currentUser = $auth.getPayload();\n\n  function update() {\n    if(papersEdit.currentUser.id === papersEdit.paper.user.id) {\n      papersEdit.paper.$update(() => {\n        $state.go('papersShow', $state.params);\n      });\n    }\n  }\n\n  this.update = update;\n\n}\n\n\nPapersCreateController.$inject = ['Paper', '$state', '$auth'];\nfunction PapersCreateController(Paper, $state, $auth) {\n  const papersCreate = this;\n\n  papersCreate.paper = {};\n\n  function create(){\n    papersCreate.paper.user_id = $auth.getPayload().id;\n    Paper.save(papersCreate.paper);\n    $state.go('papersIndex');\n  }\n  papersCreate.create = create;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: 'templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: 'templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('organismsIndex', {\n      url: '/organisms',\n      templateUrl: 'templates/organismsIndex.html',\n      controller: 'OrganismsIndexController as organismsIndex'\n    })\n    .state('organismsShow', {\n      url: '/organisms/:id',\n      templateUrl: 'templates/organismsShow.html',\n      controller: 'OrganismsShowController as organismsShow'\n    })\n    .state('papersCreate', {\n      url: '/papers/new',\n      templateUrl: 'templates/papersCreate.html',\n      controller: 'PapersCreateController as papersCreate'\n    })\n    .state('papersShow', {\n      url: '/papers/:id',\n      templateUrl: 'templates/papersShow.html',\n      controller: 'PapersShowController as papersShow'\n    })\n    .state('papersEdit', {\n      url: '/papers/:id/edit',\n      templateUrl: 'templates/papersEdit.html',\n      controller: 'PapersEditController as papersEdit'\n    })\n    .state('papersIndex', {\n      url: '/papers?organismId',\n      templateUrl: 'templates/papersIndex.html',\n      controller: 'PapersIndexController as papersIndex'\n    });\n\n  $urlRouterProvider.otherwise('/organisms');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}